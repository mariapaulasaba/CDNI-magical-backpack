{
  "name": "index",
  "description": "Append only B+ Tree Index engine for node.js",
  "version": "0.4.0",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "dependencies": {
    "step": ">= 0.0.4"
  },
  "devDependencies": {
    "coffee-script": ">= 1.0.1",
    "vows": ">= 0.5.8"
  },
  "engine": [
    "node >= 0.6.0"
  ],
  "main": "./build/index",
  "scripts": {
    "test": "vows --spec test/*-test.js"
  },
  "readme": "Node index\n==========\n\nThis module is a implementation of a append-only B+ Tree fully written in \n[coffee-script](https://github.com/jashkenas/coffee-script).\n\nBenchmark\n---------\n\n![read benchmark](https://github.com/indutny/node-index/raw/master/bench-data/read.png)\n![write benchmark](https://github.com/indutny/node-index/raw/master/bench-data/write.png)\n\nBasics\n------\n\n    // Create basic B+ Tree index that will be stored\n    // in memory (all settings are default, see below)\n    var index = require('index').createIndex();\n\n    // Store value in storage (callback is optional)\n    index.set('key', 'value', function(err) {\n      // ... your code here ...\n    });\n\n    // Get value from storage\n    index.get('key', function(err, value) {\n      // ... your code here ...\n    });\n\n    // Remove value from storage\n    index.unset('key', function(err) {\n    });\n\n    // Bulk op\n    index.bulk([\n      ['key', 'value', 1], // insert kv\n      ['key'] // remove kv\n    ], function(err, conflicts) {\n    });\n\n    // Compaction\n    index.compact(function(err) {\n    });\n\nOptions\n-------\n\n    require('index').createIndex({\n      order: 32, // Maximum number of items in page\n                 // Tree's height depends on that\n      storage: require('index').storage.memory // Place where all tree data will be stored\n                    .createStorage(),          // (see more description below)\n      sort: function(a, b) {\n        return (a === null || a < b) ? -1 : a == b ? 0 : -1;\n      } // Function that will be used to compare keys\n        // Note that null is a system value and sort should always return negative\n        // result if first argument is null\n    });\n\nLicense\n-------\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2011.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "index@0.4.0",
  "_from": "index@*"
}
